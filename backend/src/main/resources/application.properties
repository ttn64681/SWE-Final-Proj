spring.application.name=cinema-ebkg-system

# Database Configuration - Neon PostgreSQL
spring.datasource.url=jdbc:postgresql://ep-odd-mud-a8uvswnp-pooler.eastus2.azure.neon.tech/neondb?user=neondb_admin&password=npg_oAyKzfJ91XTe&sslmode=require&channelBinding=require
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.username=neondb_admin
spring.datasource.password=npg_oAyKzfJ91XTe

# JWT Configuration
jwt.secret=${JWT_SECRET:pCBbMyt5xLPDQRkpi8MxBHLQTy+P/uaQmJIadJvzktY=}
jwt.access-token-expiration=${JWT_ACCESS_TOKEN_EXPIRATION:1800000}
jwt.refresh-token-expiration=${JWT_REFRESH_TOKEN_EXPIRATION:1209600000}

# JPA/Hibernate Configuration
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# validate ensures DB matches entity definitions
# create-drop creates the DB and drops it when the app is stopped (DESTROYS DATA!)
# update updates the DB schema based on entity changes
spring.jpa.hibernate.ddl-auto=update
spring.jpa.hibernate.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Springboot Server Configuration
server.port=8080

# CORS is configured via CorsConfig.java

# Email Configuration
spring.mail.host=${MAIL_HOST:smtp.gmail.com}
spring.mail.port=${MAIL_PORT:587}
spring.mail.username=${MAIL_USERNAME:acm.cinemas123@gmail.com}
spring.mail.password=${MAIL_PASSWORD:nvjouctuvtkpbpul}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

# Application URLs for email links
app.base.url=${APP_BASE_URL:http://localhost:8080}
app.frontend.url=${APP_FRONTEND_URL:http://localhost:3000}

# Disable Flyway (database migration tool) - using Hibernate DDL instead
spring.flyway.enabled=false
